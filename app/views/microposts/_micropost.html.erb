<li id="micropost-<%= micropost.id %>">
  <%= link_to gravatar_for(micropost.user, size: 50), micropost.user %>
  <span class="user"><%= link_to micropost.user.name, micropost.user %></span>
  <span class="content">
    <%= micropost.content %>
    <%= image_tag micropost.picture.url if micropost.picture? %>
  </span>
  <span class="timestamp">
    Posted <%= time_ago_in_words(micropost.created_at) %> ago.
    <% if current_user?(micropost.user) %>
      <%= link_to "delete", micropost, method: :delete,
                                       data: { confirm: "You sure?" } %>
    <% end %>
  </span>
</li>


<!-- Listing 11.21 also adds a CSS id for each micropost using

<li id="micropost-<%#= micropost.id %>">

This is a generally good practice, as it opens up the possibility of
manipulating individual microposts at a future date (using JavaScript,
for example). -->

<!--
Notice the use of the picture? boolean method to prevent displaying an image tag
when there isn’t an image. This method is created automatically by CarrierWave
based on the name of the image attribute.
 -->

<!-- As before, we’ll use the will_paginate method:

<%#= will_paginate @microposts %>
If you compare this with the analogous line on the user index page,
Listing 9.41, you’ll see that before we had just

<%#= will_paginate %>
This worked because, in the context of the Users controller, will_paginate
assumes the existence of an instance variable called @users (which, as we saw
in Section 9.3.3, should be of class ActiveRecord::Relation). In the present
case, since we are still in the Users controller but want to paginate microposts
instead, we’ll pass an explicit @microposts variable to will_paginate. Of course,
this means that we will have to define such a variable in the user show action
(Listing 11.22). -->
